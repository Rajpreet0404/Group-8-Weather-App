{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\n\n// This component will wrap your entire app to apply global settings\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AppWrapper({\n  children\n}) {\n  _s();\n  const [settings, setSettings] = useState(null);\n\n  // Load settings and apply them globally\n  useEffect(() => {\n    // Function to load settings from localStorage\n    const loadSettings = () => {\n      try {\n        const savedSettings = localStorage.getItem('weatherAppSettings');\n        if (savedSettings) {\n          const parsedSettings = JSON.parse(savedSettings);\n          setSettings(parsedSettings);\n\n          // Apply font size to the entire document\n          document.documentElement.style.fontSize = getFontSizeValue(parsedSettings.fontSize);\n\n          // Apply dark mode if enabled\n          if (parsedSettings.darkMode) {\n            document.body.classList.add(\"dark-mode\");\n          } else {\n            document.body.classList.remove(\"dark-mode\");\n          }\n\n          // Apply dynamic background if enabled\n          if (parsedSettings.dynamicBackground) {\n            document.body.classList.add(\"dynamic-background\");\n          } else {\n            document.body.classList.remove(\"dynamic-background\");\n          }\n        }\n      } catch (error) {\n        console.error(\"Error loading settings:\", error);\n      }\n    };\n\n    // Convert font size setting to actual CSS value\n    const getFontSizeValue = size => {\n      switch (size) {\n        case \"Small\":\n          return \"14px\";\n        case \"Medium\":\n          return \"16px\";\n        case \"Large\":\n          return \"18px\";\n        default:\n          return \"14px\";\n      }\n    };\n\n    // Load settings initially\n    loadSettings();\n\n    // Set up storage event listener to detect changes from other tabs/components\n    window.addEventListener('storage', loadSettings);\n\n    // Custom event listener for settings changes within the same tab\n    window.addEventListener('settingsChanged', loadSettings);\n    return () => {\n      window.removeEventListener('storage', loadSettings);\n      window.removeEventListener('settingsChanged', loadSettings);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n}\n_s(AppWrapper, \"mCc1AI3nlnFR6PXJot/5Z7AXrOM=\");\n_c = AppWrapper;\nexport default AppWrapper;\nvar _c;\n$RefreshReg$(_c, \"AppWrapper\");","map":{"version":3,"names":["React","useEffect","useState","Fragment","_Fragment","jsxDEV","_jsxDEV","AppWrapper","children","_s","settings","setSettings","loadSettings","savedSettings","localStorage","getItem","parsedSettings","JSON","parse","document","documentElement","style","fontSize","getFontSizeValue","darkMode","body","classList","add","remove","dynamicBackground","error","console","size","window","addEventListener","removeEventListener","_c","$RefreshReg$"],"sources":["/Users/yasiralzaid/Group-8-Weather-App/gui-react-app/src/AppWrapper.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\n// This component will wrap your entire app to apply global settings\nfunction AppWrapper({ children }) {\n  const [settings, setSettings] = useState(null);\n\n  // Load settings and apply them globally\n  useEffect(() => {\n    // Function to load settings from localStorage\n    const loadSettings = () => {\n      try {\n        const savedSettings = localStorage.getItem('weatherAppSettings');\n        if (savedSettings) {\n          const parsedSettings = JSON.parse(savedSettings);\n          setSettings(parsedSettings);\n          \n          // Apply font size to the entire document\n          document.documentElement.style.fontSize = getFontSizeValue(parsedSettings.fontSize);\n          \n          // Apply dark mode if enabled\n          if (parsedSettings.darkMode) {\n            document.body.classList.add(\"dark-mode\");\n          } else {\n            document.body.classList.remove(\"dark-mode\");\n          }\n          \n          // Apply dynamic background if enabled\n          if (parsedSettings.dynamicBackground) {\n            document.body.classList.add(\"dynamic-background\");\n          } else {\n            document.body.classList.remove(\"dynamic-background\");\n          }\n        }\n      } catch (error) {\n        console.error(\"Error loading settings:\", error);\n      }\n    };\n\n    // Convert font size setting to actual CSS value\n    const getFontSizeValue = (size) => {\n      switch (size) {\n        case \"Small\": return \"14px\";\n        case \"Medium\": return \"16px\";\n        case \"Large\": return \"18px\";\n        default: return \"14px\";\n      }\n    };\n\n    // Load settings initially\n    loadSettings();\n    \n    // Set up storage event listener to detect changes from other tabs/components\n    window.addEventListener('storage', loadSettings);\n    \n    // Custom event listener for settings changes within the same tab\n    window.addEventListener('settingsChanged', loadSettings);\n    \n    return () => {\n      window.removeEventListener('storage', loadSettings);\n      window.removeEventListener('settingsChanged', loadSettings);\n    };\n  }, []);\n\n  return (\n    <>\n      {children}\n    </>\n  );\n}\n\nexport default AppWrapper;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;;AAElD;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,UAAUA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAChC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;;EAE9C;EACAD,SAAS,CAAC,MAAM;IACd;IACA,MAAMW,YAAY,GAAGA,CAAA,KAAM;MACzB,IAAI;QACF,MAAMC,aAAa,GAAGC,YAAY,CAACC,OAAO,CAAC,oBAAoB,CAAC;QAChE,IAAIF,aAAa,EAAE;UACjB,MAAMG,cAAc,GAAGC,IAAI,CAACC,KAAK,CAACL,aAAa,CAAC;UAChDF,WAAW,CAACK,cAAc,CAAC;;UAE3B;UACAG,QAAQ,CAACC,eAAe,CAACC,KAAK,CAACC,QAAQ,GAAGC,gBAAgB,CAACP,cAAc,CAACM,QAAQ,CAAC;;UAEnF;UACA,IAAIN,cAAc,CAACQ,QAAQ,EAAE;YAC3BL,QAAQ,CAACM,IAAI,CAACC,SAAS,CAACC,GAAG,CAAC,WAAW,CAAC;UAC1C,CAAC,MAAM;YACLR,QAAQ,CAACM,IAAI,CAACC,SAAS,CAACE,MAAM,CAAC,WAAW,CAAC;UAC7C;;UAEA;UACA,IAAIZ,cAAc,CAACa,iBAAiB,EAAE;YACpCV,QAAQ,CAACM,IAAI,CAACC,SAAS,CAACC,GAAG,CAAC,oBAAoB,CAAC;UACnD,CAAC,MAAM;YACLR,QAAQ,CAACM,IAAI,CAACC,SAAS,CAACE,MAAM,CAAC,oBAAoB,CAAC;UACtD;QACF;MACF,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF,CAAC;;IAED;IACA,MAAMP,gBAAgB,GAAIS,IAAI,IAAK;MACjC,QAAQA,IAAI;QACV,KAAK,OAAO;UAAE,OAAO,MAAM;QAC3B,KAAK,QAAQ;UAAE,OAAO,MAAM;QAC5B,KAAK,OAAO;UAAE,OAAO,MAAM;QAC3B;UAAS,OAAO,MAAM;MACxB;IACF,CAAC;;IAED;IACApB,YAAY,CAAC,CAAC;;IAEd;IACAqB,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAEtB,YAAY,CAAC;;IAEhD;IACAqB,MAAM,CAACC,gBAAgB,CAAC,iBAAiB,EAAEtB,YAAY,CAAC;IAExD,OAAO,MAAM;MACXqB,MAAM,CAACE,mBAAmB,CAAC,SAAS,EAAEvB,YAAY,CAAC;MACnDqB,MAAM,CAACE,mBAAmB,CAAC,iBAAiB,EAAEvB,YAAY,CAAC;IAC7D,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEN,OAAA,CAAAF,SAAA;IAAAI,QAAA,EACGA;EAAQ,gBACT,CAAC;AAEP;AAACC,EAAA,CAjEQF,UAAU;AAAA6B,EAAA,GAAV7B,UAAU;AAmEnB,eAAeA,UAAU;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}